#####################################
# Create Market
#####################################
[invoke.create_market_2btc]
target = ["PassivePerpProxy"]
abi = "<%= JSON.stringify(contracts.PassivePerpProxy.abi.concat({'type':'event','name':'MarketDataUpdated','inputs':[{'name':'marketData','type':'tuple','indexed':false,'internalType':'struct Market.Data','components':[{'name':'id','type':'uint128','internalType':'uint128'},{'name':'passivePoolId','type':'uint128','internalType':'uint128'},{'name':'poolAccountId','type':'uint128','internalType':'uint128'},{'name':'quoteToken','type':'address','internalType':'address'},{'name':'quoteTokenDecimals','type':'uint8','internalType':'uint8'},{'name':'lastFundingVelocity','type':'int256','internalType':'SD59x18'},{'name':'lastFundingRate','type':'int256','internalType':'SD59x18'},{'name':'lastFundingTimestamp','type':'uint256','internalType':'uint256'},{'name':'lastMTM','type':'tuple','internalType':'struct PriceData','components':[{'name':'price','type':'uint256','internalType':'UD60x18'},{'name':'timestamp','type':'uint256','internalType':'uint256'}]},{'name':'longTrackers','type':'tuple','internalType':'struct FundingAndADLTrackers','components':[{'name':'fundingValue','type':'int256','internalType':'SD59x18'},{'name':'baseMultiplier','type':'uint256','internalType':'UD60x18'},{'name':'adlUnwindPrice','type':'uint256','internalType':'UD60x18'}]},{'name':'shortTrackers','type':'tuple','internalType':'struct FundingAndADLTrackers','components':[{'name':'fundingValue','type':'int256','internalType':'SD59x18'},{'name':'baseMultiplier','type':'uint256','internalType':'UD60x18'},{'name':'adlUnwindPrice','type':'uint256','internalType':'UD60x18'}]},{'name':'openInterest','type':'uint256','internalType':'UD60x18'}]},{'name':'blockTimestamp','type':'uint256','indexed':false,'internalType':'uint256'}],'anonymous':false})) %>"
fromCall.func = "owner"
func = "createMarket"
args = [
  "Market BTC",
  "<%= settings.pool1RusdId %>",
]
var.market_2btc.event = "MarketDataUpdated"
var.market_2btc.arg = 0
depends = [
  "invoke.core_register_instrument_passive_perp",
  "var.passive_pool_1rusd",
  "invoke.create_market_1eth"
]

[var.market_2btc_vars]
market2BtcId = "<%= (String(settings.market_2btc.id) === '2') ? settings.market_2btc.id : parseUnits('0', 'assert market_2btc_vars failed') %>"
depends = [
  "invoke.create_market_2btc",
]

##################################################
# Market's Collateral Pool Feature Flags
##################################################
[invoke.market_2btc_unpause_cp]
target = ["CoreProxy"]
fromCall.func = "getCollateralPoolOwner"
fromCall.args = ["<%= settings.market2BtcId %>"]
func = "setFeatureFlagAllowAll"
args = [
    "<%= keccak256(defaultAbiCoder.encode(['bytes32','uint128'],[keccak256(hexlify('collateralPoolEnabled')),settings.market2BtcId])) %>",
    true
]
depends = [
  "invoke.upgrade_core_proxy", 
  "var.market_2btc_vars",
]

[invoke.market_2btc_set_pausers_cp]
target = ["CoreProxy"]
fromCall.func = "getCollateralPoolOwner"
fromCall.args = ["<%= settings.market2BtcId %>"]
func = "setDeniers"
args = [
  "<%= keccak256(defaultAbiCoder.encode(['bytes32','uint128'],[keccak256(hexlify('collateralPoolEnabled')),settings.market2BtcId])) %>",
  [
    "<%= settings.pauser1 %>",
    "<%= settings.pauser2 %>",
    "<%= settings.pauser3 %>",
    "<%= settings.pauser4 %>",
  ],
]
depends = [
  "invoke.upgrade_core_proxy", 
  "var.market_2btc_vars",
]

##################################################
# Market Feature Flags
##################################################
[invoke.market_2btc_unpause_market]
target = ["PassivePerpProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = [
    "<%= keccak256(defaultAbiCoder.encode(['bytes32','uint128'],[keccak256(hexlify('marketEnabled')),settings.market2BtcId])) %>",
    true
]
depends = [
  "invoke.upgrade_core_proxy", 
  "var.market_2btc_vars",
]

[invoke.market_2btc_set_pausers_market]
target = ["PassivePerpProxy"]
fromCall.func = "owner"
func = "setDeniers"
args = [
  "<%= keccak256(defaultAbiCoder.encode(['bytes32','uint128'],[keccak256(hexlify('marketEnabled')),settings.market2BtcId])) %>",
  [
    "<%= settings.pauser1 %>",
    "<%= settings.pauser2 %>",
    "<%= settings.pauser3 %>",
    "<%= settings.pauser4 %>",
  ],
]
depends = [
  "invoke.upgrade_core_proxy", 
  "var.market_2btc_vars",
]

#####################################
# Market Configuration
#####################################
[invoke.market_2btc_set_market_config]
target = ["PassivePerpProxy"]
fromCall.func = "owner"
func = "setMarketConfiguration"
args = [
  "<%= settings.market2BtcId %>",
  { riskMatrixIndex = "<%= settings.market2Btc_riskMatrixIndex %>", maxOpenBase = "<%= parseEther(settings.market2Btc_maxOpenBaseUnscaled) %>", velocityMultiplier = "<%= parseEther(settings.market2Btc_velocityMultiplierUnscaled) %>", oracleNodeId = "<%= settings.btcUsdcNodeId %>", mtmWindow = "<%= settings.market2Btc_mtmWindow %>", dutchConfig = { lambda = "<%= parseEther(settings.market2Btc_dutchConfig_lambdaUnscaled) %>", minBase = "<%= parseEther(settings.market2Btc_dutchConfig_minBaseUnscaled) %>" }, slippageParams = { phi = "<%= parseEther(settings.market2Btc_slippageParams_phiUnscaled) %>", beta = "<%= parseEther(settings.market2Btc_slippageParams_betaUnscaled) %>" }, minimumOrderBase = "<%= parseEther(settings.market2Btc_minimumOrderBaseUnscaled) %>", baseSpacing = "<%= parseEther(settings.market2Btc_baseSpacingUnscaled) %>", priceSpacing = "<%= parseEther(settings.market2Btc_priceSpacingUnscaled) %>"}
]
depends = [
  "invoke.create_market_2btc",
  "invoke.oracle_manager_register_node_btc_usdc",
]

#####################################
# Market's Collateral Pool Limits
#####################################
[invoke.market_2btc_set_cp_limits]
target = ["CoreProxy"]
fromCall.func = "getCollateralPoolOwner"
fromCall.args = ["<%= settings.market2BtcId %>"]
func = "setCollateralPoolLimits"
args = [
  "<%= settings.market2BtcId %>",
  { maxMarkets = "1", maxCollaterals = "1" }
]
depends = [
  "invoke.create_market_2btc",
]

##################################################
# Market's Collateral Pool Insurance Fund
##################################################
[invoke.market_2btc_insurance_fund_config]
target = ["CoreProxy"]
fromCall.func = "getCollateralPoolOwner"
fromCall.args = ["<%= settings.market2BtcId %>"]
func = "configureCollateralPoolInsuranceFund"
args = [
  "<%= settings.market2BtcId %>",
  # reusing params from CP 1 since this CP will get merged
  { accountId = "<%= settings.cp1Rusd_insuranceFundAccountId %>", liquidationFee = "<%= parseEther(settings.cp1Rusd_insuranceFund_liquidationFeeUnscaled) %>" }
]
depends = [
  "invoke.cp_1rusd_create_insurance_fund_account",
  "invoke.create_market_2btc",
]

##################################################
# Market Tier Fees
##################################################
[invoke.market_2btc_set_tier0_fee]
target = ["PassivePerpProxy"]
fromCall.func = "owner"
func = "setTierFee"
args = [
  "<%= settings.market2BtcId %>",
  "0",
  "<%= parseEther(settings.market2Btc_tier0FeeUnscaled) %>"
]
depends = [
  "invoke.upgrade_passive_perp_proxy",
  "invoke.create_market_2btc",
]

##################################################
# Merge Market's Collateral Pool 
##################################################
[invoke.market_2btc_merge_collateral_pool]
target = ["CoreProxy"]
fromCall.func = "owner"
func = "mergeCollateralPools"
args = [
  "<%= settings.market1EthId %>",
  "<%= settings.market2BtcId %>",
]
depends = [
  "invoke.market_1eth_unpause_cp",
  "invoke.market_1eth_set_pausers_cp",
  "invoke.market_1eth_unpause_market",
  "invoke.market_1eth_set_pausers_market",
  "invoke.market_1eth_set_market_config",
  "invoke.market_1eth_set_cp_limits",
  "invoke.market_1eth_insurance_fund_config",
  "invoke.market_2btc_unpause_cp",
  "invoke.market_2btc_set_pausers_cp",
  "invoke.market_2btc_unpause_market",
  "invoke.market_2btc_set_pausers_market",
  "invoke.market_2btc_set_market_config",
  "invoke.market_2btc_set_cp_limits",
  "invoke.market_2btc_insurance_fund_config",
]
