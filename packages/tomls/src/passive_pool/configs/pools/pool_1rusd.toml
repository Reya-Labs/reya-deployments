[invoke.passive_pool_create_pool_1rusd]
target = ["PassivePoolProxy"]
abi = "<%= JSON.stringify(contracts.PassivePoolProxy.abi.concat([{'type':'event','name':'PoolCreated','inputs':[{'name':'poolId','type':'uint128','indexed':true,'internalType':'uint128'},{'name':'quoteToken','type':'address','indexed':true,'internalType':'address'},{'name':'accountId','type':'uint128','indexed':true,'internalType':'uint128'},{'name':'blockTimestamp','type':'uint256','indexed':false,'internalType':'uint256'}],'anonymous':false}])) %>"
fromCall.func = "owner"
func = "createPool"
args = ["<%= contracts.RUSDProxy.address %>"]
var.pool1RusdId.event = "PoolCreated"
var.pool1RusdId.arg = 0
var.pool1RusdAccountId.event = "PoolCreated"
var.pool1RusdAccountId.arg = 2
depends = ["var.rusd_complete", "invoke.passive_pool_global_config"]

[invoke.passive_pool_unpause_pool_1rusd]
target = ["PassivePoolProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = [
    "<%= keccak256(defaultAbiCoder.encode(['bytes32','uint128'],[keccak256(hexlify('poolEnabled')),settings.pool1RusdId])) %>",
    true,
]
depends = ["invoke.passive_pool_create_pool_1rusd"]

[invoke.passive_pool_set_allocation_configuration_1rusd]
target = ["PassivePoolProxy"]
fromCall.func = "owner"
func = "setAllocationConfiguration"
args = [
    "<%= settings.pool1RusdId %>",
    { quoteTokenTargetRatio = "<%= parseEther(settings.pool1_quoteTokenTargetRatioUnscaled) %>" },
]
depends = [
    "invoke.passive_pool_create_pool_1rusd",
    "invoke.passive_pool_unpause_pool_1rusd",
]

[invoke.passive_pool_set_allocations_1rusd]
target = ["PassivePoolProxy"]
fromCall.func = "owner"
func = "setAllocations"
args = [
    "<%= settings.pool1RusdId %>",
    [
        # weth, wsteth, usde, susde, deusd, sdeusd -> need to double check order and make sure same on mainnet
        0,
        0,
        0,
        0,
        "<%= parseEther(settings.pool1_DEUSDTargetRatioPostQuoteUnscaled) %>",
        "<%= parseEther(settings.pool1_SDEUSDTargetRatioPostQuoteUnscaled) %>",
    ],
]
depends = [
    # todo: needs to depend on all supporting tokens being configured
    "invoke.passive_pool_create_pool_1rusd",
    "invoke.passive_pool_unpause_pool_1rusd",
    "invoke.passive_pool_set_allocation_configuration_1rusd",
]
