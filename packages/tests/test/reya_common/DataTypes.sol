pragma solidity >=0.8.19 <0.9.0;

uint256 constant ethereumChainId = 1;
uint256 constant arbitrumChainId = 42_161;
uint256 constant optimismChainId = 10;
uint256 constant polygonChainId = 137;
uint256 constant baseChainId = 8453;
uint256 constant ethereumSepoliaChainId = 11_155_111;
uint256 constant arbitrumSepoliaChainId = 421_614;
uint256 constant optimismSepoliaChainId = 11_155_420;

uint256 constant ONE_MINUTE_IN_SECONDS = 60;

struct StaticEcosystem {
    // network
    string REYA_RPC;
    string MAINNET_RPC;
    // other (external) chain id
    uint256 destinationChainId;
    // multisigs
    address multisig;
    // Reya contracts
    address payable core;
    address payable pool;
    address payable perp;
    address oracleManager;
    address payable periphery;
    address payable ordersGateway;
    address payable oracleAdaptersProxy;
    address exchangePass;
    address accountNft;
    // Reya tokens
    address rusd;
    address usdc;
    address weth;
    address wbtc;
    address usde;
    address susde;
    address deusd;
    address sdeusd;
    address rselini;
    address ramber;
    address rhedge;
    address srusd;
    address wsteth;
    // Elixir tokens on Mainnet (Ethereum or Ethereum Sepolia)
    address elixirSdeusd;
    // Reya modules
    address ownerUpgradeModule;
    // Reya variables
    uint128 passivePoolId;
    uint128 passivePoolAccountId;
    // Reya bots
    address coExecutionBot;
    address poolRebalancer;
    address rseliniCustodian;
    address rseliniSubscriber;
    address rseliniRedeemer;
    address ramberCustodian;
    address ramberSubscriber;
    address ramberRedeemer;
    address rhedgeCustodian;
    address rhedgeSubscriber;
    address rhedgeRedeemer;
    address aeLiquidator1;
    address setMarketZeroFeeBot;
    // node ids for spot prices
    bytes32 rusdUsdNodeId;
    bytes32 usdcUsdStorkNodeId;
    bytes32 ethUsdStorkNodeId;
    bytes32 ethUsdcStorkNodeId;
    bytes32 usdeUsdStorkNodeId;
    bytes32 usdeUsdcStorkNodeId;
    bytes32 susdeUsdStorkNodeId;
    bytes32 susdeUsdcStorkNodeId;
    bytes32 wstethUsdStorkNodeId;
    bytes32 wstethUsdcStorkNodeId;
    bytes32 deusdUsdStorkNodeId;
    bytes32 deusdUsdcStorkNodeId;
    bytes32 sdeusdDeusdStorkNodeId;
    bytes32 sdeusdUsdcStorkNodeId;
    bytes32 srusdRusd_RRStorkNodeId;
    bytes32 rseliniUsdcReyaLmNodeId;
    bytes32 ramberUsdcReyaLmNodeId;
    bytes32 rhedgeUsdcReyaLmNodeId;
    bytes32 srusdUsdcPoolNodeId;
    bytes32 ftmUsdStorkNodeId;
    bytes32 ftmUsdcStorkNodeId;
    // node ids for mark prices
    bytes32 ethUsdStorkMarkNodeId;
    bytes32 ethUsdcStorkMarkNodeId;
    bytes32 btcUsdStorkMarkNodeId;
    bytes32 btcUsdcStorkMarkNodeId;
    bytes32 solUsdStorkMarkNodeId;
    bytes32 solUsdcStorkMarkNodeId;
    bytes32 arbUsdStorkMarkNodeId;
    bytes32 arbUsdcStorkMarkNodeId;
    bytes32 opUsdStorkMarkNodeId;
    bytes32 opUsdcStorkMarkNodeId;
    bytes32 avaxUsdStorkMarkNodeId;
    bytes32 avaxUsdcStorkMarkNodeId;
    bytes32 mkrUsdStorkMarkNodeId;
    bytes32 mkrUsdcStorkMarkNodeId;
    bytes32 linkUsdStorkMarkNodeId;
    bytes32 linkUsdcStorkMarkNodeId;
    bytes32 aaveUsdStorkMarkNodeId;
    bytes32 aaveUsdcStorkMarkNodeId;
    bytes32 crvUsdStorkMarkNodeId;
    bytes32 crvUsdcStorkMarkNodeId;
    bytes32 uniUsdStorkMarkNodeId;
    bytes32 uniUsdcStorkMarkNodeId;
    bytes32 suiUsdStorkMarkNodeId;
    bytes32 suiUsdcStorkMarkNodeId;
    bytes32 tiaUsdStorkMarkNodeId;
    bytes32 tiaUsdcStorkMarkNodeId;
    bytes32 seiUsdStorkMarkNodeId;
    bytes32 seiUsdcStorkMarkNodeId;
    bytes32 zroUsdStorkMarkNodeId;
    bytes32 zroUsdcStorkMarkNodeId;
    bytes32 xrpUsdStorkMarkNodeId;
    bytes32 xrpUsdcStorkMarkNodeId;
    bytes32 wifUsdStorkMarkNodeId;
    bytes32 wifUsdcStorkMarkNodeId;
    bytes32 pepe1kUsdStorkMarkNodeId;
    bytes32 pepe1kUsdcStorkMarkNodeId;
    bytes32 popcatUsdStorkMarkNodeId;
    bytes32 popcatUsdcStorkMarkNodeId;
    bytes32 dogeUsdStorkMarkNodeId;
    bytes32 dogeUsdcStorkMarkNodeId;
    bytes32 kshibUsdStorkMarkNodeId;
    bytes32 kshibUsdcStorkMarkNodeId;
    bytes32 kbonkUsdStorkMarkNodeId;
    bytes32 kbonkUsdcStorkMarkNodeId;
    bytes32 aptUsdStorkMarkNodeId;
    bytes32 aptUsdcStorkMarkNodeId;
    bytes32 bnbUsdStorkMarkNodeId;
    bytes32 bnbUsdcStorkMarkNodeId;
    bytes32 jtoUsdStorkMarkNodeId;
    bytes32 jtoUsdcStorkMarkNodeId;
    bytes32 adaUsdStorkMarkNodeId;
    bytes32 adaUsdcStorkMarkNodeId;
    bytes32 ldoUsdStorkMarkNodeId;
    bytes32 ldoUsdcStorkMarkNodeId;
    bytes32 polUsdStorkMarkNodeId;
    bytes32 polUsdcStorkMarkNodeId;
    bytes32 nearUsdStorkMarkNodeId;
    bytes32 nearUsdcStorkMarkNodeId;
    // bytes32 ftmUsdStorkMarkNodeId;
    // bytes32 ftmUsdcStorkMarkNodeId;
    bytes32 enaUsdStorkMarkNodeId;
    bytes32 enaUsdcStorkMarkNodeId;
    bytes32 eigenUsdStorkMarkNodeId;
    bytes32 eigenUsdcStorkMarkNodeId;
    bytes32 pendleUsdStorkMarkNodeId;
    bytes32 pendleUsdcStorkMarkNodeId;
    bytes32 goatUsdStorkMarkNodeId;
    bytes32 goatUsdcStorkMarkNodeId;
    bytes32 grassUsdStorkMarkNodeId;
    bytes32 grassUsdcStorkMarkNodeId;
    bytes32 kneiroUsdStorkMarkNodeId;
    bytes32 kneiroUsdcStorkMarkNodeId;
    bytes32 dotUsdStorkMarkNodeId;
    bytes32 dotUsdcStorkMarkNodeId;
    bytes32 ltcUsdStorkMarkNodeId;
    bytes32 ltcUsdcStorkMarkNodeId;
    bytes32 pythUsdStorkMarkNodeId;
    bytes32 pythUsdcStorkMarkNodeId;
    bytes32 jupUsdStorkMarkNodeId;
    bytes32 jupUsdcStorkMarkNodeId;
    bytes32 penguUsdStorkMarkNodeId;
    bytes32 penguUsdcStorkMarkNodeId;
    bytes32 trumpUsdStorkMarkNodeId;
    bytes32 trumpUsdcStorkMarkNodeId;
    bytes32 hypeUsdStorkMarkNodeId;
    bytes32 hypeUsdcStorkMarkNodeId;
    bytes32 virtualUsdStorkMarkNodeId;
    bytes32 virtualUsdcStorkMarkNodeId;
    bytes32 ai16zUsdStorkMarkNodeId;
    bytes32 ai16zUsdcStorkMarkNodeId;
    bytes32 aixbtUsdStorkMarkNodeId;
    bytes32 aixbtUsdcStorkMarkNodeId;
    bytes32 sonicUsdStorkMarkNodeId;
    bytes32 sonicUsdcStorkMarkNodeId;
    bytes32 fartcoinUsdStorkMarkNodeId;
    bytes32 fartcoinUsdcStorkMarkNodeId;
    bytes32 griffainUsdStorkMarkNodeId;
    bytes32 griffainUsdcStorkMarkNodeId;
    bytes32 wldUsdStorkMarkNodeId;
    bytes32 wldUsdcStorkMarkNodeId;
    bytes32 atomUsdStorkMarkNodeId;
    bytes32 atomUsdcStorkMarkNodeId;
    bytes32 apeUsdStorkMarkNodeId;
    bytes32 apeUsdcStorkMarkNodeId;
    bytes32 tonUsdStorkMarkNodeId;
    bytes32 tonUsdcStorkMarkNodeId;
    bytes32 ondoUsdStorkMarkNodeId;
    bytes32 ondoUsdcStorkMarkNodeId;
    bytes32 trxUsdStorkMarkNodeId;
    bytes32 trxUsdcStorkMarkNodeId;
    bytes32 injUsdStorkMarkNodeId;
    bytes32 injUsdcStorkMarkNodeId;
    bytes32 moveUsdStorkMarkNodeId;
    bytes32 moveUsdcStorkMarkNodeId;
    bytes32 beraUsdStorkMarkNodeId;
    bytes32 beraUsdcStorkMarkNodeId;
    bytes32 layerUsdStorkMarkNodeId;
    bytes32 layerUsdcStorkMarkNodeId;
    bytes32 taoUsdStorkMarkNodeId;
    bytes32 taoUsdcStorkMarkNodeId;
    bytes32 ipUsdMarkNodeIdStork;
    bytes32 ipUsdcMarkNodeIdStork;
    bytes32 meUsdMarkNodeIdStork;
    bytes32 meUsdcMarkNodeIdStork;
    bytes32 pumpUsdMarkNodeIdStork;
    bytes32 pumpUsdcMarkNodeIdStork;
    bytes32 morphoUsdMarkNodeIdStork;
    bytes32 morphoUsdcMarkNodeIdStork;
    bytes32 syrupUsdMarkNodeIdStork;
    bytes32 syrupUsdcMarkNodeIdStork;
    bytes32 aeroUsdMarkNodeIdStork;
    bytes32 aeroUsdcMarkNodeIdStork;
    bytes32 kaitoUsdMarkNodeIdStork;
    bytes32 kaitoUsdcMarkNodeIdStork;
    bytes32 zoraUsdMarkNodeIdStork;
    bytes32 zoraUsdcMarkNodeIdStork;
    bytes32 proveUsdMarkNodeIdStork;
    bytes32 proveUsdcMarkNodeIdStork;
    bytes32 paxgUsdMarkNodeIdStork;
    bytes32 paxgUsdcMarkNodeIdStork;
    bytes32 yzyUsdMarkNodeIdStork;
    bytes32 yzyUsdcMarkNodeIdStork;
    bytes32 xplUsdMarkNodeIdStork;
    bytes32 xplUsdcMarkNodeIdStork;
    bytes32 wlfiUsdMarkNodeIdStork;
    bytes32 wlfiUsdcMarkNodeIdStork;
    bytes32 lineaUsdMarkNodeIdStork;
    bytes32 lineaUsdcMarkNodeIdStork;
    bytes32 megaUsdMarkNodeIdStork;
    bytes32 megaUsdcMarkNodeIdStork;
}

struct DynamicEcosystem {
    mapping(address token => address controller) socketController;
    mapping(address token => address executionHelper) socketExecutionHelper;
    mapping(address token => mapping(uint256 chainId => address connector)) socketConnector;
}
