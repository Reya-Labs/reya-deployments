pragma solidity >=0.8.19 <0.9.0;

uint256 constant ethereumChainId = 1;
uint256 constant arbitrumChainId = 42_161;
uint256 constant optimismChainId = 10;
uint256 constant polygonChainId = 137;
uint256 constant baseChainId = 8453;
uint256 constant ethereumSepoliaChainId = 11_155_111;
uint256 constant arbitrumSepoliaChainId = 421_614;
uint256 constant optimismSepoliaChainId = 11_155_420;
uint256 constant ONE_MINUTE_IN_SECONDS = 60;

struct StaticEcosystem {
    string REYA_RPC;
    address multisig;
    address payable core;
    address payable pool;
    address payable perp;
    address oracleManager;
    address payable periphery;
    address payable ordersGateway;
    address payable oracleAdaptersProxy;
    address exchangePass;
    address accountNft;
    address rusd;
    address usdc;
    address weth;
    address wbtc;
    address usde;
    address susde;
    address deusd;
    address sdeusd;
    address ownerUpgradeModule;
    bytes32 rusdUsdNodeId;
    // bytes32 usdcUsdNodeId;
    bytes32 usdcUsdStorkNodeId;
    // bytes32 ethUsdNodeId;
    // bytes32 ethUsdcNodeId;
    bytes32 ethUsdStorkNodeId;
    bytes32 ethUsdcStorkNodeId;
    // bytes32 ethUsdcStorkFallbackNodeId;
    bytes32 ethUsdStorkMarkNodeId;
    bytes32 ethUsdcStorkMarkNodeId;
    // bytes32 btcUsdNodeId;
    // bytes32 btcUsdcNodeId;
    // bytes32 btcUsdStorkNodeId;
    // bytes32 btcUsdcStorkNodeId;
    // bytes32 btcUsdcStorkFallbackNodeId;
    bytes32 btcUsdStorkMarkNodeId;
    bytes32 btcUsdcStorkMarkNodeId;
    // bytes32 solUsdNodeId;
    // bytes32 solUsdcNodeId;
    // bytes32 solUsdStorkNodeId;
    // bytes32 solUsdcStorkNodeId;
    // bytes32 solUsdcStorkFallbackNodeId;
    bytes32 solUsdStorkMarkNodeId;
    bytes32 solUsdcStorkMarkNodeId;
    // bytes32 arbUsdNodeId;
    // bytes32 arbUsdcNodeId;
    // bytes32 arbUsdStorkNodeId;
    // bytes32 arbUsdcStorkNodeId;
    // bytes32 arbUsdcStorkFallbackNodeId;
    bytes32 arbUsdStorkMarkNodeId;
    bytes32 arbUsdcStorkMarkNodeId;
    // bytes32 opUsdNodeId;
    // bytes32 opUsdcNodeId;
    // bytes32 opUsdStorkNodeId;
    // bytes32 opUsdcStorkNodeId;
    // bytes32 opUsdcStorkFallbackNodeId;
    bytes32 opUsdStorkMarkNodeId;
    bytes32 opUsdcStorkMarkNodeId;
    // bytes32 avaxUsdNodeId;
    // bytes32 avaxUsdcNodeId;
    // bytes32 avaxUsdStorkNodeId;
    // bytes32 avaxUsdcStorkNodeId;
    // bytes32 avaxUsdcStorkFallbackNodeId;
    bytes32 avaxUsdStorkMarkNodeId;
    bytes32 avaxUsdcStorkMarkNodeId;
    // bytes32 usdeUsdNodeId;
    // bytes32 usdeUsdcNodeId;
    bytes32 usdeUsdStorkNodeId;
    bytes32 usdeUsdcStorkNodeId;
    // bytes32 usdeUsdcStorkFallbackNodeId;
    // bytes32 mkrUsdNodeId;
    // bytes32 mkrUsdcNodeId;
    // bytes32 mkrUsdStorkNodeId;
    // bytes32 mkrUsdcStorkNodeId;
    // bytes32 mkrUsdcStorkFallbackNodeId;
    bytes32 mkrUsdStorkMarkNodeId;
    bytes32 mkrUsdcStorkMarkNodeId;
    // bytes32 linkUsdNodeId;
    // bytes32 linkUsdcNodeId;
    // bytes32 linkUsdStorkNodeId;
    // bytes32 linkUsdcStorkNodeId;
    // bytes32 linkUsdcStorkFallbackNodeId;
    bytes32 linkUsdStorkMarkNodeId;
    bytes32 linkUsdcStorkMarkNodeId;
    // bytes32 aaveUsdNodeId;
    // bytes32 aaveUsdcNodeId;
    // bytes32 aaveUsdStorkNodeId;
    // bytes32 aaveUsdcStorkNodeId;
    // bytes32 aaveUsdcStorkFallbackNodeId;
    bytes32 aaveUsdStorkMarkNodeId;
    bytes32 aaveUsdcStorkMarkNodeId;
    // bytes32 crvUsdNodeId;
    // bytes32 crvUsdcNodeId;
    // bytes32 crvUsdStorkNodeId;
    // bytes32 crvUsdcStorkNodeId;
    // bytes32 crvUsdcStorkFallbackNodeId;
    bytes32 crvUsdStorkMarkNodeId;
    bytes32 crvUsdcStorkMarkNodeId;
    // bytes32 uniUsdNodeId;
    // bytes32 uniUsdcNodeId;
    // bytes32 uniUsdStorkNodeId;
    // bytes32 uniUsdcStorkNodeId;
    // bytes32 uniUsdcStorkFallbackNodeId;
    bytes32 uniUsdStorkMarkNodeId;
    bytes32 uniUsdcStorkMarkNodeId;
    bytes32 suiUsdStorkMarkNodeId;
    bytes32 suiUsdcStorkMarkNodeId;
    bytes32 tiaUsdStorkMarkNodeId;
    bytes32 tiaUsdcStorkMarkNodeId;
    bytes32 seiUsdStorkMarkNodeId;
    bytes32 seiUsdcStorkMarkNodeId;
    bytes32 zroUsdStorkMarkNodeId;
    bytes32 zroUsdcStorkMarkNodeId;
    bytes32 xrpUsdStorkMarkNodeId;
    bytes32 xrpUsdcStorkMarkNodeId;
    bytes32 wifUsdStorkMarkNodeId;
    bytes32 wifUsdcStorkMarkNodeId;
    bytes32 pepe1kUsdStorkMarkNodeId;
    bytes32 pepe1kUsdcStorkMarkNodeId;
    // bytes32 susdeUsdNodeId;
    // bytes32 susdeUsdcNodeId;
    bytes32 susdeUsdStorkNodeId;
    bytes32 susdeUsdcStorkNodeId;
    // bytes32 susdeUsdcStorkFallbackNodeId;
    uint256 mainChainId;
    uint128 passivePoolId;
    uint128 passivePoolAccountId;
    address coExecutionBot;
}

struct DynamicEcosystem {
    mapping(address token => address controller) socketController;
    mapping(address token => address executionHelper) socketExecutionHelper;
    mapping(address token => mapping(uint256 chainId => address connector)) socketConnector;
}
